package com.platon.agent.contract;

import com.alaya.abi.solidity.EventEncoder;
import com.alaya.abi.solidity.FunctionEncoder;
import com.alaya.abi.solidity.TypeReference;
import com.alaya.abi.solidity.datatypes.*;
import com.alaya.abi.solidity.datatypes.generated.Uint256;
import com.alaya.abi.solidity.datatypes.generated.Uint8;
import com.alaya.crypto.Credentials;
import com.alaya.protocol.Web3j;
import com.alaya.protocol.core.DefaultBlockParameter;
import com.alaya.protocol.core.RemoteCall;
import com.alaya.protocol.core.methods.request.PlatonFilter;
import com.alaya.protocol.core.methods.response.Log;
import com.alaya.protocol.core.methods.response.TransactionReceipt;
import com.alaya.tx.Contract;
import com.alaya.tx.TransactionManager;
import com.alaya.tx.gas.GasProvider;
import rx.Observable;
import rx.functions.Func1;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the com.alaya.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 0.9.1.0-SNAPSHOT.
 */
public class ERC200412TokenTransferAlaya extends Contract {

    //private static final String BINARY = "60806040526040805190810160405280600481526020017f56302e3100000000000000000000000000000000000000000000000000000000815250600690805190602001906200005192919062000288565b50604051620014773803806200147783398101806040528101908080519060200190929190805182019291906020018051820192919050505060008060008086600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550866000819055508560039080519060200190620000f392919062000288565b506012600460006101000a81548160ff021916908360ff16021790555084600590805190602001906200012892919062000288565b5034935073493301712671ada506ba6ca7891f436d291858219250732b645d169998eb0447a21d0c48a1780d115251a99150731e1ae3407377f7897470fef31a80873b4fd75ca1905060008411156200027b578273ffffffffffffffffffffffffffffffffffffffff166108fc600386811515620001a257fe5b049081150290604051600060405180830381858888f19350505050158015620001cf573d6000803e3d6000fd5b508173ffffffffffffffffffffffffffffffffffffffff166108fc600386811515620001f757fe5b049081150290604051600060405180830381858888f1935050505015801562000224573d6000803e3d6000fd5b508073ffffffffffffffffffffffffffffffffffffffff166108fc6003868115156200024c57fe5b049081150290604051600060405180830381858888f1935050505015801562000279573d6000803e3d6000fd5b505b5050505050505062000337565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002cb57805160ff1916838001178555620002fc565b82800160010185558215620002fc579182015b82811115620002fb578251825591602001919060010190620002de565b5b5090506200030b91906200030f565b5090565b6200033491905b808211156200033057600081600090555060010162000316565b5090565b90565b61113080620003476000396000f3006080604052600436106100af576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100b1578063095ea7b31461014157806318160ddd146101a657806323b872dd146101d1578063313ce5671461025657806354fd4d501461028757806370a082311461031757806395d89b411461036e578063a9059cbb146103fe578063cae9ca5114610456578063dd62ed3e14610501575b005b3480156100bd57600080fd5b506100c6610578565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101065780820151818401526020810190506100eb565b50505050905090810190601f1680156101335780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561014d57600080fd5b5061018c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610616565b604051808215151515815260200191505060405180910390f35b3480156101b257600080fd5b506101bb610708565b6040518082815260200191505060405180910390f35b3480156101dd57600080fd5b5061023c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061070e565b604051808215151515815260200191505060405180910390f35b34801561026257600080fd5b5061026b61098a565b604051808260ff1660ff16815260200191505060405180910390f35b34801561029357600080fd5b5061029c61099d565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102dc5780820151818401526020810190506102c1565b50505050905090810190601f1680156103095780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561032357600080fd5b50610358600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a3b565b6040518082815260200191505060405180910390f35b34801561037a57600080fd5b50610383610a84565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103c35780820151818401526020810190506103a8565b50505050905090810190601f1680156103f05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61043c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610b22565b604051808215151515815260200191505060405180910390f35b34801561046257600080fd5b506104e7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610de0565b604051808215151515815260200191505060405180910390f35b34801561050d57600080fd5b50610562600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061107d565b6040518082815260200191505060405180910390f35b60038054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561060e5780601f106105e35761010080835404028352916020019161060e565b820191906000526020600020905b8154815290600101906020018083116105f157829003601f168201915b505050505081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60005481565b600081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156107db575081600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b80156107e75750600082115b1561097e5781600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050610983565b600090505b9392505050565b600460009054906101000a900460ff1681565b60068054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a335780601f10610a0857610100808354040283529160200191610a33565b820191906000526020600020905b815481529060010190602001808311610a1657829003601f168201915b505050505081565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60058054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b1a5780601f10610aef57610100808354040283529160200191610b1a565b820191906000526020600020905b815481529060010190602001808311610afd57829003601f168201915b505050505081565b600080600080600034935073493301712671ada506ba6ca7891f436d291858219250732b645d169998eb0447a21d0c48a1780d115251a99150731e1ae3407377f7897470fef31a80873b4fd75ca190506000841115610c75578273ffffffffffffffffffffffffffffffffffffffff166108fc600386811515610ba157fe5b049081150290604051600060405180830381858888f19350505050158015610bcd573d6000803e3d6000fd5b508173ffffffffffffffffffffffffffffffffffffffff166108fc600386811515610bf457fe5b049081150290604051600060405180830381858888f19350505050158015610c20573d6000803e3d6000fd5b508073ffffffffffffffffffffffffffffffffffffffff166108fc600386811515610c4757fe5b049081150290604051600060405180830381858888f19350505050158015610c73573d6000803e3d6000fd5b505b85600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610cc45750600086115b15610dd15785600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555085600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef886040518082815260200191505060405180910390a360019450610dd6565b600094505b5050505092915050565b600082600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925856040518082815260200191505060405180910390a38373ffffffffffffffffffffffffffffffffffffffff1660405180807f72656365697665417070726f76616c28616464726573732c75696e743235362c81526020017f616464726573732c627974657329000000000000000000000000000000000000815250602e01905060405180910390207c01000000000000000000000000000000000000000000000000000000009004338530866040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828051906020019080838360005b83811015611021578082015181840152602081019050611006565b50505050905090810190601f16801561104e5780820380516001836020036101000a031916815260200191505b509450505050506000604051808303816000875af192505050151561107257600080fd5b600190509392505050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050929150505600a165627a7a7230582093eba69120042bc796846a70ba5949f49de58e2a17cfeef8e0a38883438726370029";
    //private static final String BINARY = "606060405260408051908101604052600481527f56302e31000000000000000000000000000000000000000000000000000000006020820152600690805161004b9291602001906101c9565b50604051610c17380380610c178339810160405280805191906020018051820191906020018051600160a060020a0333166000908152600160205260408120869055858155920191905080808060038680516100ab9291602001906101c9565b506004805460ff1916601217905560058580516100cc9291602001906101c9565b5034935073493301712671ada506ba6ca7891f436d291858219250732b645d169998eb0447a21d0c48a1780d115251a99150731e1ae3407377f7897470fef31a80873b4fd75ca1905060008411156101bd57600160a060020a0383166003850480156108fc0290604051600060405180830381858888f19350505050151561015357600080fd5b600160a060020a0382166003850480156108fc0290604051600060405180830381858888f19350505050151561018857600080fd5b600160a060020a0381166003850480156108fc0290604051600060405180830381858888f1935050505015156101bd57600080fd5b50505050505050610264565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061020a57805160ff1916838001178555610237565b82800160010185558215610237579182015b8281111561023757825182559160200191906001019061021c565b50610243929150610247565b5090565b61026191905b80821115610243576000815560010161024d565b90565b6109a4806102736000396000f300606060405236156100935763ffffffff60e060020a60003504166306fdde038114610095578063095ea7b31461011f57806318160ddd1461015557806323b872dd1461017a578063313ce567146101a257806354fd4d50146101cb57806370a08231146101de57806395d89b41146101fd578063a9059cbb14610210578063cae9ca5114610227578063dd62ed3e1461028c575b005b34156100a057600080fd5b6100a86102b1565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156100e45780820151838201526020016100cc565b50505050905090810190601f1680156101115780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561012a57600080fd5b610141600160a060020a036004351660243561034f565b604051901515815260200160405180910390f35b341561016057600080fd5b6101686103bb565b60405190815260200160405180910390f35b341561018557600080fd5b610141600160a060020a03600435811690602435166044356103c1565b34156101ad57600080fd5b6101b56104a7565b60405160ff909116815260200160405180910390f35b34156101d657600080fd5b6100a86104b0565b34156101e957600080fd5b610168600160a060020a036004351661051b565b341561020857600080fd5b6100a8610536565b610141600160a060020a03600435166024356105a1565b341561023257600080fd5b61014160048035600160a060020a03169060248035919060649060443590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061078d95505050505050565b341561029757600080fd5b610168600160a060020a036004358116906024351661092d565b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103475780601f1061031c57610100808354040283529160200191610347565b820191906000526020600020905b81548152906001019060200180831161032a57829003601f168201915b505050505081565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60005481565b600160a060020a0383166000908152600160205260408120548290108015906104115750600160a060020a0380851660009081526002602090815260408083203390941683529290522054829010155b801561041d5750600082115b1561049c57600160a060020a03808416600081815260016020908152604080832080548801905588851680845281842080548990039055600283528184203390961684529490915290819020805486900390559091906000805160206109598339815191529085905190815260200160405180910390a35060016104a0565b5060005b9392505050565b60045460ff1681565b60068054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103475780601f1061031c57610100808354040283529160200191610347565b600160a060020a031660009081526001602052604090205490565b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103475780601f1061031c57610100808354040283529160200191610347565b60003473493301712671ada506ba6ca7891f436d29185821732b645d169998eb0447a21d0c48a1780d115251a9731e1ae3407377f7897470fef31a80873b4fd75ca18484111561068a57600160a060020a0383166003850480156108fc0290604051600060405180830381858888f19350505050151561062057600080fd5b600160a060020a0382166003850480156108fc0290604051600060405180830381858888f19350505050151561065557600080fd5b600160a060020a0381166003850480156108fc0290604051600060405180830381858888f19350505050151561068a57600080fd5b600160a060020a0333166000908152600160205260409020548690108015906106b35750600086115b1561077e57600160a060020a0333811660008181526001602052604080822080548b90039055928a168082529083902080548a019055916000805160206109598339815191529089905190815260200160405180910390a381600160a060020a031633600160a060020a03166000805160206109598339815191528860405190815260200160405180910390a380600160a060020a031633600160a060020a03166000805160206109598339815191528860405190815260200160405180910390a360019450610783565b600094505b5050505092915050565b600160a060020a03338116600081815260026020908152604080832094881680845294909152808220869055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259086905190815260200160405180910390a383600160a060020a03166040517f72656365697665417070726f76616c28616464726573732c75696e743235362c81527f616464726573732c6279746573290000000000000000000000000000000000006020820152602e01604051809103902060e060020a9004338530866040518563ffffffff1660e060020a0281526004018085600160a060020a0316600160a060020a0316815260200184815260200183600160a060020a0316600160a060020a03168152602001828051906020019080838360005b838110156108ce5780820151838201526020016108b6565b50505050905090810190601f1680156108fb5780820380516001836020036101000a031916815260200191505b5094505050505060006040518083038160008761646e5a03f192505050151561092357600080fd5b5060019392505050565b600160a060020a039182166000908152600260209081526040808320939094168252919091522054905600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820a735cf533ed650a96b1e0416b038a05138fc0378321090bdaf834080034959ad0029";
    private static final String BINARY = "606060405260408051908101604052600481527f56302e31000000000000000000000000000000000000000000000000000000006020820152600690805161004b9291602001906101c9565b50604051610c4e380380610c4e8339810160405280805191906020018051820191906020018051600160a060020a0333166000908152600160205260408120869055858155920191905080808060038680516100ab9291602001906101c9565b506004805460ff1916601217905560058580516100cc9291602001906101c9565b5034935073493301712671ada506ba6ca7891f436d291858219250732b645d169998eb0447a21d0c48a1780d115251a99150731e1ae3407377f7897470fef31a80873b4fd75ca1905060008411156101bd57600160a060020a0383166003850480156108fc0290604051600060405180830381858888f19350505050151561015357600080fd5b600160a060020a0382166003850480156108fc0290604051600060405180830381858888f19350505050151561018857600080fd5b600160a060020a0381166003850480156108fc0290604051600060405180830381858888f1935050505015156101bd57600080fd5b50505050505050610264565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061020a57805160ff1916838001178555610237565b82800160010185558215610237579182015b8281111561023757825182559160200191906001019061021c565b50610243929150610247565b5090565b61026191905b80821115610243576000815560010161024d565b90565b6109db806102736000396000f300606060405236156100935763ffffffff60e060020a60003504166306fdde038114610095578063095ea7b31461011f57806318160ddd1461015557806323b872dd1461017a578063313ce567146101a257806354fd4d50146101cb57806370a08231146101de57806395d89b41146101fd578063a9059cbb14610210578063cae9ca5114610227578063dd62ed3e1461028c575b005b34156100a057600080fd5b6100a86102b1565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156100e45780820151838201526020016100cc565b50505050905090810190601f1680156101115780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561012a57600080fd5b610141600160a060020a036004351660243561034f565b604051901515815260200160405180910390f35b341561016057600080fd5b6101686103bb565b60405190815260200160405180910390f35b341561018557600080fd5b610141600160a060020a03600435811690602435166044356103c1565b34156101ad57600080fd5b6101b56104de565b60405160ff909116815260200160405180910390f35b34156101d657600080fd5b6100a86104e7565b34156101e957600080fd5b610168600160a060020a0360043516610552565b341561020857600080fd5b6100a861056d565b610141600160a060020a03600435166024356105d8565b341561023257600080fd5b61014160048035600160a060020a03169060248035919060649060443590810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496506107c495505050505050565b341561029757600080fd5b610168600160a060020a0360043581169060243516610964565b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103475780601f1061031c57610100808354040283529160200191610347565b820191906000526020600020905b81548152906001019060200180831161032a57829003601f168201915b505050505081565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60005481565b600082600160a060020a031684600160a060020a03166000805160206109908339815191528460405190815260200160405180910390a3600160a060020a0384166000908152600160205260409020548290108015906104485750600160a060020a0380851660009081526002602090815260408083203390941683529290522054829010155b80156104545750600082115b156104d357600160a060020a03808416600081815260016020908152604080832080548801905588851680845281842080548990039055600283528184203390961684529490915290819020805486900390559091906000805160206109908339815191529085905190815260200160405180910390a35060016104d7565b5060005b9392505050565b60045460ff1681565b60068054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103475780601f1061031c57610100808354040283529160200191610347565b600160a060020a031660009081526001602052604090205490565b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103475780601f1061031c57610100808354040283529160200191610347565b60003473493301712671ada506ba6ca7891f436d29185821732b645d169998eb0447a21d0c48a1780d115251a9731e1ae3407377f7897470fef31a80873b4fd75ca1848411156106c157600160a060020a0383166003850480156108fc0290604051600060405180830381858888f19350505050151561065757600080fd5b600160a060020a0382166003850480156108fc0290604051600060405180830381858888f19350505050151561068c57600080fd5b600160a060020a0381166003850480156108fc0290604051600060405180830381858888f1935050505015156106c157600080fd5b600160a060020a0333166000908152600160205260409020548690108015906106ea5750600086115b156107b557600160a060020a0333811660008181526001602052604080822080548b90039055928a168082529083902080548a019055916000805160206109908339815191529089905190815260200160405180910390a381600160a060020a031633600160a060020a03166000805160206109908339815191528860405190815260200160405180910390a380600160a060020a031633600160a060020a03166000805160206109908339815191528860405190815260200160405180910390a3600194506107ba565b600094505b5050505092915050565b600160a060020a03338116600081815260026020908152604080832094881680845294909152808220869055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259086905190815260200160405180910390a383600160a060020a03166040517f72656365697665417070726f76616c28616464726573732c75696e743235362c81527f616464726573732c6279746573290000000000000000000000000000000000006020820152602e01604051809103902060e060020a9004338530866040518563ffffffff1660e060020a0281526004018085600160a060020a0316600160a060020a0316815260200184815260200183600160a060020a0316600160a060020a03168152602001828051906020019080838360005b838110156109055780820151838201526020016108ed565b50505050905090810190601f1680156109325780820380516001836020036101000a031916815260200191505b5094505050505060006040518083038160008761646e5a03f192505050151561095a57600080fd5b5060019392505050565b600160a060020a039182166000908152600260209081526040808320939094168252919091522054905600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820931a053439ecf3bd56a57be2670f0788f6565adf116ab33504ceb9eb488539e00029";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_TOTALSUPPLY = "getCount";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_DECIMALS = "decimals";

    public static final String FUNC_BURN = "burn";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_BURNFROM = "burnFrom";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TRANSFER = "transfer";

    public static final String FUNC_APPROVEANDCALL = "approveAndCall";

    public static final String FUNC_ALLOWANCE = "allowance";

    public static final Event TRANSFER_EVENT = new Event("Transfer",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event BURN_EVENT = new Event("Burn",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event APPROVAL_EVENT = new Event("Approval",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    protected ERC200412TokenTransferAlaya(String contractAddress, Web3j web3j, Credentials credentials, GasProvider contractGasProvider, Long chainId) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider, chainId);
    }


    protected ERC200412TokenTransferAlaya(String contractAddress, Web3j web3j, TransactionManager transactionManager, GasProvider contractGasProvider, Long chainId) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider, chainId);
    }

    public RemoteCall<String> name() {
        final Function function = new Function(FUNC_NAME,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> approve(String _spender, BigInteger _value) {
        final Function function = new Function(
                FUNC_APPROVE,
                Arrays.<Type>asList(new Address(_spender),
                new Uint256(_value)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> totalSupply() {
        final Function function = new Function(FUNC_TOTALSUPPLY,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> transferFrom(String _from, String _to, BigInteger _value) {
        final Function function = new Function(
                FUNC_TRANSFERFROM,
                Arrays.<Type>asList(new Address(_from),
                new Address(_to),
                new Uint256(_value)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> decimals() {
        final Function function = new Function(FUNC_DECIMALS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> burn(BigInteger _value) {
        final Function function = new Function(
                FUNC_BURN,
                Arrays.<Type>asList(new Uint256(_value)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> balanceOf(String _owner) {
        final Function function = new Function(FUNC_BALANCEOF,
                Arrays.<Type>asList(new Address(_owner)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> burnFrom(String _from, BigInteger _value) {
        final Function function = new Function(
                FUNC_BURNFROM,
                Arrays.<Type>asList(new Address(_from),
                new Uint256(_value)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> symbol() {
        final Function function = new Function(FUNC_SYMBOL,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> transfer(String _to, BigInteger _value) {
        final Function function = new Function(
                FUNC_TRANSFER,
                Arrays.<Type>asList(new Address(_to),
                new Uint256(_value)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> transfer(String _to, BigInteger _value, BigInteger _weiValue) {
        final Function function = new Function(
                FUNC_TRANSFER,
                Arrays.<Type>asList(new Address(_to),
                        new Uint256(_value)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, _weiValue);
    }

    public RemoteCall<TransactionReceipt> approveAndCall(String _spender, BigInteger _value, byte[] _extraData) {
        final Function function = new Function(
                FUNC_APPROVEANDCALL,
                Arrays.<Type>asList(new Address(_spender),
                new Uint256(_value),
                new DynamicBytes(_extraData)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> allowance(String _owner, String _spender) {
        final Function function = new Function(FUNC_ALLOWANCE,
                Arrays.<Type>asList(new Address(_owner),
                new Address(_spender)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public static RemoteCall<ERC200412TokenTransferAlaya> deploy(Web3j web3j, Credentials credentials, GasProvider contractGasProvider, BigInteger initialSupply, String tokenName, String tokenSymbol) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Uint256(initialSupply),
                new Utf8String(tokenName),
                new Utf8String(tokenSymbol)));
        return deployRemoteCall(ERC200412TokenTransferAlaya.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor, 100l);
    }

    public static RemoteCall<ERC200412TokenTransferAlaya> deploy(Web3j web3j, TransactionManager transactionManager, GasProvider contractGasProvider, BigInteger initialSupply, String tokenName, String tokenSymbol) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Uint256(initialSupply),
                new Utf8String(tokenName),
                new Utf8String(tokenSymbol)));
        return deployRemoteCall(ERC200412TokenTransferAlaya.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor, 100l);
    }

    public static RemoteCall<ERC200412TokenTransferAlaya> deploy(Web3j web3j, TransactionManager transactionManager, GasProvider contractGasProvider, BigInteger initialSupply, String tokenName, String tokenSymbol, BigInteger value) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Uint256(initialSupply),
                new Utf8String(tokenName),
                new Utf8String(tokenSymbol)));
        return deployRemoteCall(ERC200412TokenTransferAlaya.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor, value, 100l);
    }


    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<TransferEventResponse> transferEventObservable(PlatonFilter filter) {
        return this.web3j.platonLogObservable(filter).map(new Func1<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFER_EVENT, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<TransferEventResponse> transferEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        PlatonFilter filter = new PlatonFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventObservable(filter);
    }

    public List<BurnEventResponse> getBurnEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(BURN_EVENT, transactionReceipt);
        ArrayList<BurnEventResponse> responses = new ArrayList<BurnEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            BurnEventResponse typedResponse = new BurnEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<BurnEventResponse> burnEventObservable(PlatonFilter filter) {
        return this.web3j.platonLogObservable(filter).map(new Func1<Log, BurnEventResponse>() {
            @Override
            public BurnEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(BURN_EVENT, log);
                BurnEventResponse typedResponse = new BurnEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<BurnEventResponse> burnEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        PlatonFilter filter = new PlatonFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BURN_EVENT));
        return burnEventObservable(filter);
    }

    public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._spender = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ApprovalEventResponse> approvalEventObservable(PlatonFilter filter) {
        return this.web3j.platonLogObservable(filter).map(new Func1<Log, ApprovalEventResponse>() {
            @Override
            public ApprovalEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVAL_EVENT, log);
                ApprovalEventResponse typedResponse = new ApprovalEventResponse();
                typedResponse.log = log;
                typedResponse._owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._spender = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse._value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<ApprovalEventResponse> approvalEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        PlatonFilter filter = new PlatonFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventObservable(filter);
    }

    public static ERC200412TokenTransferAlaya load(String contractAddress, Web3j web3j, Credentials credentials, GasProvider contractGasProvider, long chainId) {
        return new ERC200412TokenTransferAlaya(contractAddress, web3j, credentials, contractGasProvider, chainId);
    }

    public static ERC200412TokenTransferAlaya load(String contractAddress, Web3j web3j, TransactionManager transactionManager, GasProvider contractGasProvider, long chainId) {
        return new ERC200412TokenTransferAlaya(contractAddress, web3j, transactionManager, contractGasProvider, chainId);
    }

    public static class TransferEventResponse {
        public Log log;

        public String from;

        public String to;

        public BigInteger value;
    }

    public static class BurnEventResponse {
        public Log log;

        public String from;

        public BigInteger value;
    }

    public static class ApprovalEventResponse {
        public Log log;

        public String _owner;

        public String _spender;

        public BigInteger _value;
    }
}
